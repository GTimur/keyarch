
package client;

import java.awt.Component;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;

import java.util.Vector;

import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Galutvo
 */
public class DialogNewKeys extends javax.swing.JDialog {
    private TableRowSorter<TableModel> sorter;
    private int recnum=-1; 
    
    /** Creates new form DialogNewKeys */
    public DialogNewKeys(java.awt.Frame parent, boolean modal) {
        
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(parent);
        this.setResizable(true);
        ClearAndRefillTable();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Новые ключи клиентов (кандидаты на регистрацию)");

        jScrollPane1.setPreferredSize(new java.awt.Dimension(500, 200));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setToolTipText("Сгенерированные ключи клиентов (кандидаты на регистрацию в системе)");
        jTable1.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jButton3.setText("Закрыть");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(986, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        pack();
    }//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DialogNewKeys.class.getName()).log(java.util.logging.Level.SEVERE, null,
                                                                                  ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DialogNewKeys.class.getName()).log(java.util.logging.Level.SEVERE, null,
                                                                                  ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DialogNewKeys.class.getName()).log(java.util.logging.Level.SEVERE, null,
                                                                                  ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DialogNewKeys.class.getName()).log(java.util.logging.Level.SEVERE, null,
                                                                                  ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DialogNewKeys dialog = new DialogNewKeys(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void ClearAndRefillTable(){
        /*Очистка таблицы*/
        DefaultTableModel model = (DefaultTableModel)this.jTable1.getModel();
        while (model.getRowCount() > 0){
                for (int i = 0; i < model.getRowCount(); ++i){
                    model.removeRow(i);
                }
            };
        /**/
        try {
            this.refilltable(jTable1);             
        } catch (SQLException f) {
        }
        sorter = new TableRowSorter<TableModel>(this.jTable1.getModel());
        jTable1.setRowSorter(sorter);         
        setColumnsWidth(jTable1);                
    }

    public void refilltable(JTable table) throws SQLException {        
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
        
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }      
        
        try {        
        Connection con = FrameLogon.mainpool.OpenConnection();  //.gconn; //DriverManager.getConnection(get_dbconndata(1), get_dbconndata(2), get_dbconndata(3));        
        
        Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select " +             
            "creation_date v01 " + 
            ",id_key       v02 " + 
            ",provider     v03 " + 
            ",token_serial v04 " + 
            ", last_name||' '|| first_name ||' '|| middle_name   v05 " + 
            ",position  v06 " + 
            ",idcard_type ||' '|| idcard_serial ||' '|| idcard_number ||' '|| idcard_issue_date ||' '|| idcard_issuer v07 " + 
            ",case when token_chip_type like '%ST19NR66%' " + 
            "                  then 'Криптомодуль-С' " + 
            "                  when token_chip_type like '%ST23YL18-002%' " + 
            "                  then 'Криптомодуль С23' " + 
            "                  when token_chip_type like '%ST23YL18-004%' " + 
            "                  then 'СКЗИ \"ФОРОС. Исполнение №2\" / \"Криптомодуль C23\"' " + 
            "                  when token_chip_type like '%ccom33%' " + 
            "                  then 'Крипто-Ком 3.3' " +
            "                  when token_chip_type like '%MSKEY_K-201%' "+  
            "                  then 'MS_KEY K Исп.5.1.1' "+
            "                  when token_chip_type like '%MSKEY_K-202%' "+
            "                  then 'MS_KEY K \"АНГАРА\" Исп.8.1.1' "+
            " end v08 " + 
            ",token_chip_type v09 " +
            ",nvl((select distinct LISTAGG(iclicusid||' - '||ccliname, ', '||CHR(13)) WITHIN GROUP (order by iclicusid) " + 
            "from (select iclicusid,ccliname ,replace(cfacename1||' '||cfacename2||' '||cfacename3,'  ',' ') clname from xxi.key_info) ki " + 
            "where replace(last_name||' '||first_name||' '||middle_name,'  ',' ') = clname),'НЕТ ДАННЫХ')" +
            "from new_keys@ibank2lnk nk " + 
            "order by creation_date desc");
            table.setModel(buildTableModel(rs));            
            rs.close();            

        st.close();
        con.close(); 
        con = null;
        } catch (SQLException e) {
            e.printStackTrace();
        }  
        FrameLogon.mainpool.Close();
    }
    
    public static DefaultTableModel buildTableModel(ResultSet rs) throws SQLException {
        ResultSetMetaData metaData = rs.getMetaData();
        // names of columns
        String[] ColNames = {
                                "ДАТА СОЗДАНИЯ    "                                
                                ,"ID КЛЮЧА                 "
                                ,"ПРОВАЙДЕР    "
                                ,"ID USB-ТОКЕНА    "                                
                                ,"ИНФОРМАЦИЯ О ВЛАДЕЛЬЦЕ           "
                                ,"ДОЛЖНОСТЬ"
                                ,"ДОКУМЕНТ ВЛАДЕЛЬЦА                         "
                                ,"ТИП СКЗИ             "
                                ,"ТИП ЧИПА        "
                                ,"ПОХОЖИЙ ВЛАДЕЛЕЦ (ПРОГНОЗ ПРИНАДЛЕЖНОСТИ)                                                              "
                                
                             };
        // names of columns
        Vector<String> columnNames = new Vector<String>();
        int columnCount = metaData.getColumnCount();
        for (int column = 0; column <= columnCount-1; column++) {
            //columnNames.add(metaData.getColumnName(column));
            columnNames.add(ColNames[column]);
        }

        // data of the table
        Vector<Vector<Object>> data = new Vector<Vector<Object>>();
        while (rs.next()) {
            Vector<Object> vector = new Vector<Object>();
            for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                vector.add(rs.getObject(columnIndex));
            }
            data.add(vector);
        }
        
        TableModel resmodel = new DefaultTableModel(data, columnNames) {
              public boolean isCellEditable(int rowIndex, int mColIndex) {
                return false;
              }
            };
        
        return (DefaultTableModel) resmodel;
    }
    
        
    public static void Set_Column_Size(JTable table,int column_number, int size){
        TableColumn column = null;
        column = table.getColumnModel().getColumn(column_number);
        column.setMaxWidth(size);           
        column.setPreferredWidth(size);
        }

    public static void Set_Column_Name(JTable table,int column_number, String column_name){
        TableColumn column = null;
        column = table.getColumnModel().getColumn(column_number);
        column.setHeaderValue(column_name);        
        }


    /*Формат таблицы по ширине названия столбца*/
    public void setColumnsWidth(JTable table) {
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        JTableHeader th = table.getTableHeader();
        for (int i = 0; i < table.getColumnCount(); i++) {
            TableColumn column = table.getColumnModel().getColumn(i);
            int prefWidth = 
                Math.round(
                    (float) th.getFontMetrics(
                        th.getFont()).getStringBounds(th.getTable().getColumnName(i),
                        th.getGraphics()
                    ).getWidth()
                );
            column.setPreferredWidth(prefWidth + 10);
        }
    }
    
    //Функция для форматирования ширины столбцов таблицы
    public static void Set_Column_Render(JTable table){
        //Нужно указать для объекта table.setAutoResizeMode( JTable.AUTO_RESIZE_OFF );
        for (int column = 0; column < table.getColumnCount(); column++)
        {
            TableColumn tableColumn = table.getColumnModel().getColumn(column);
            int preferredWidth = tableColumn.getMinWidth();
            int maxWidth = tableColumn.getMaxWidth();
         
            for (int row = 0; row < table.getRowCount(); row++)
            {
                TableCellRenderer cellRenderer = table.getCellRenderer(row, column);
                Component c = table.prepareRenderer(cellRenderer, row, column);
                int width = c.getPreferredSize().width + table.getIntercellSpacing().width;
                preferredWidth = Math.max(preferredWidth, width);
         
                //  We've exceeded the maximum width, no need to check other rows
         
                if (preferredWidth >= maxWidth)
                {
                    preferredWidth = maxWidth;
                    break;
                }
            }         
            tableColumn.setPreferredWidth( preferredWidth );
        }
    }
}
