
package client;

import java.awt.Component;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;

import java.util.Vector;

import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

/**
 *
 * @author Galutvo
 */
public class DialogInformer extends javax.swing.JDialog {

    /** Creates new form DialogInformer */
    public DialogInformer(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(parent);        
        this.setResizable(false);        
        try {
            initTables();
        } catch (SQLException e) {
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setTitle("Информер изменений сертификатов");

        jScrollPane1.setToolTipText("Активированные сертификаты клиентов");

        jTable1.setBackground(new java.awt.Color(204, 204, 204));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jTable1.setCellSelectionEnabled(true);
        jScrollPane1.setViewportView(jTable1);

        jTable2.setBackground(new java.awt.Color(255, 153, 102));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jTable2.setToolTipText("Блокированные сертификаты клиентов");
        jTable2.setCellSelectionEnabled(true);
        jScrollPane2.setViewportView(jTable2);

        jScrollPane3.setToolTipText("Прогноз истечения срока сертификатов");

        jTable3.setBackground(new java.awt.Color(255, 102, 102));
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jTable3.setCellSelectionEnabled(true);
        jScrollPane3.setViewportView(jTable3);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("АКТИВИРОВАННЫЕ СЕРТИФИКАТЫ:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 153, 102));
        jLabel2.setText("БЛОКИРОВАННЫЕ СЕРТИФИКАТЫ:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 102, 102));
        jLabel3.setText("ПРОГНОЗ ИСТЕЧЕНИЯ СРОКА СЕРТИФИКАТОВ НА 3 НЕДЕЛИ:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
            .addComponent(jScrollPane2)
            .addComponent(jScrollPane3)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DialogInformer.class.getName()).log(java.util.logging.Level.SEVERE, null,
                                                                                   ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DialogInformer.class.getName()).log(java.util.logging.Level.SEVERE, null,
                                                                                   ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DialogInformer.class.getName()).log(java.util.logging.Level.SEVERE, null,
                                                                                   ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DialogInformer.class.getName()).log(java.util.logging.Level.SEVERE, null,
                                                                                   ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DialogInformer dialog = new DialogInformer(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    // End of variables declaration//GEN-END:variables

    public void initTables() throws SQLException {      
        refilltable(jTable1,1);
        Set_Column_Render(jTable1);

        refilltable(jTable2,2);
        Set_Column_Render(jTable2);

        refilltable(jTable3,3);
        Set_Column_Render(jTable3);
        //setColumnsWidth(jTable1);
        
    }
    
    public void cleartable(JTable table) {
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        while (model.getRowCount() > 0){
                for (int i = 0; i < model.getRowCount(); ++i){
                    model.removeRow(i);
                }
            };            
    }


    //3 вида таблиц - 1 - активация, 2 - блокировки, 3 - прогноз окончания действия
    public void refilltable(JTable table, int type) throws SQLException {        
        cleartable(table);
        String query="";
        if (type==1){
            query="SELECT " + 
            "to_char(h.action_time,'DD.MM.RRRR') v01" + 
            ",name_cln v02" + 
            ",h.id_key v03" + 
            ",DECODE (k.status_key,0,'У',1,'Б',2,'А')  v04" + 
            ",ext_client_id v05 " + 
            "FROM ibank2.keys_history@ibank2lnk h, ibank2.clients@ibank2lnk c, ibank2.keys@ibank2lnk k " + 
            "WHERE c.client_id = k.client_id and c.client_id<>290 " + 
            "AND k.id_key = h.id_key " + 
            "AND k.status_key = 2 " + 
            "AND action_time >= (select trunc(max(dregdate),'YEAR') from xxi.key_info) " + 
            "AND action_time >= to_date('30.04.2015','DD.MM.RRRR') " + 
            "AND to_char(k.id_key) not in (select csgnid from xxi.key_info) " + 
            "ORDER BY h.action_time";            
        } else if(type==2){
            query="SELECT " + 
            "to_char(h.action_time,'DD.MM.RRRR') v01" + 
            ",name_cln v02" + 
            ",h.id_key v03" + 
            ",DECODE (k.status_key,0,'У',1,'Б',2,'А')  v04" + 
            ",ext_client_id v05 " + 
            "FROM   ibank2.keys_history@ibank2lnk h, ibank2.clients@ibank2lnk c, ibank2.keys@ibank2lnk k " + 
            "WHERE  c.client_id = k.client_id and c.client_id<>290 " + 
            "AND k.id_key = h.id_key " + 
            "AND k.status_key = 1 " + 
            "AND action_time >= (select trunc(max(dwiped),'YEAR') from xxi.key_info) " +
            "AND action_time >= to_date('30.04.2015','DD.MM.RRRR') " + 
            "ORDER BY h.action_time";
        } else {
            query="SELECT " + 
            "to_char(begin_date,'DD.MM.RRRR') v00" +
            ",to_char(end_date,'DD.MM.RRRR') v01" + 
            ",name_cln v02" + 
            ",id_key v03" + 
            ",DECODE (k.status_key,0,'У',1,'Б',2,'А')  v04" + 
            ",ext_client_id v05 " + 
            "FROM ibank2.clients@ibank2lnk c,ibank2.keys@ibank2lnk k " + 
            "where c.client_id=k.client_id " + 
            "and end_date >= to_date(sysdate-62,'DD.MM.RRRR') " + 
            "and end_date <= to_date(sysdate+21,'DD.MM.RRRR') " + 
            "and status_key=2 " + 
            "order by end_date";
        }
        
        Connection con = FrameLogon.mainpool.OpenConnection();  //.gconn; //DriverManager.getConnection(get_dbconndata(1), get_dbconndata(2), get_dbconndata(3));
        
        Statement st = con.createStatement();
        //System.out.println(query);        
        ResultSet rs = st.executeQuery(query);
        table.setModel(buildTableModel(rs,type));            
        rs.close();
                       
        st.close();
        con.close(); 
        con = null;
        FrameLogon.mainpool.Close();
    }
    
    public static DefaultTableModel buildTableModel(ResultSet rs,int type) throws SQLException {
        ResultSetMetaData metaData = rs.getMetaData();        
        String[] ColNames = {
                                 "Дата"                               
                                ,"Клиент"
                                ,"ЭП" 
                                ,"Статус"
                                ,"АБС"                                 
                                 
                             };
        if (type==3){
              ColNames=new String[6];
              ColNames[0] = "Начало";
              ColNames[1] = "Истекает";
              ColNames[2] = "Клиент";
              ColNames[3] = "ЭП";
              ColNames[4] = "Статус";              
              ColNames[5] = "АБС";           
        }
        
        // names of columns
        Vector<String> columnNames = new Vector<String>();
        int columnCount = metaData.getColumnCount();
        for (int column = 0; column <= columnCount-1; column++) {
            //columnNames.add(metaData.getColumnName(column));
            columnNames.add(ColNames[column]);
        }


        // data of the table
        Vector<Vector<Object>> data = new Vector<Vector<Object>>();
        while (rs.next()) {
            Vector<Object> vector = new Vector<Object>();
            for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                vector.add(rs.getObject(columnIndex));
            }
            data.add(vector);
        }
        
        TableModel resmodel = new DefaultTableModel(data, columnNames) {
              public boolean isCellEditable(int rowIndex, int mColIndex) {
                return false;
              }
            };
        
        return (DefaultTableModel) resmodel;
    }

    /*Формат таблицы по ширине названия столбца*/
        public void setColumnsWidth(JTable table) {
            table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            JTableHeader th = table.getTableHeader();
            for (int i = 0; i < table.getColumnCount(); i++) {
                TableColumn column = table.getColumnModel().getColumn(i);
                int prefWidth = 
                    Math.round(
                        (float) th.getFontMetrics(
                            th.getFont()).getStringBounds(th.getTable().getColumnName(i),
                            th.getGraphics()
                        ).getWidth()
                    );
                column.setPreferredWidth(prefWidth + 10);
            }
        }

    //Функция для форматирования ширины столбцов таблицы
    public static void Set_Column_Render(JTable table){
        //Нужно указать для объекта table.setAutoResizeMode( JTable.AUTO_RESIZE_OFF );
        for (int column = 0; column < table.getColumnCount(); column++)
        {
            TableColumn tableColumn = table.getColumnModel().getColumn(column);
            int preferredWidth = tableColumn.getMinWidth();
            int maxWidth = tableColumn.getMaxWidth();
         
            for (int row = 0; row < table.getRowCount(); row++)
            {
                TableCellRenderer cellRenderer = table.getCellRenderer(row, column);
                Component c = table.prepareRenderer(cellRenderer, row, column);
                int width = c.getPreferredSize().width + table.getIntercellSpacing().width;
                preferredWidth = Math.max(preferredWidth, width);
         
                //  We've exceeded the maximum width, no need to check other rows
         
                if (preferredWidth >= maxWidth)
                {
                    preferredWidth = maxWidth;
                    break;
                }
            }         
            tableColumn.setPreferredWidth( preferredWidth );
        }
    }    

}
